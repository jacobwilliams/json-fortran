language: python

python:
  - 3.6

sudo: false

cache:
  apt: true
  pip: true
  directories:
    - $HOME/.cache/pip
    - $HOME/.local

# Build matrix: Run the three build systems and tests in parallel
matrix:
  include:
    - os: linux
      dist: trusty
      addons:
        apt:
          sources:
            - kalakris-cmake
            - ubuntu-toolchain-r-test
          packages:
            - nodejs
            - npm
            - gfortran-6
            - binutils
            - cmake
            - python-pip
      env:
        - GFORTRAN=gfortran-6
        - GCOV=gcov-6
        # CMake build with unit tests, no documentation, with coverage analysis
        # No unicode so that coverage combined with the build script will cover unicode
        # and non-unicode code paths
        - BUILD_SCRIPT="mkdir cmake-build && cd cmake-build && cmake .. && make -j 4 check"
        - CODE_COVERAGE="no"
        - DEPLOY_DOCUMENTATION="no"

    - os: linux
      dist: trusty
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - nodejs
            - npm
            - gfortran-6
            - binutils
            - python-pip
            - graphviz
      env:
        - GFORTRAN=gfortran-6
        - GCOV=gcov-6
        # build with build.sh, make documentation, run unit tests
        # and perform coverage analysis
        - BUILD_SCRIPT="./build.sh --coverage --skip-documentation && ./build.sh --coverage --enable-unicode"
        - CODE_COVERAGE="yes"
        - DEPLOY_DOCUMENTATION="yes"

    - os: linux
      dist: trusty
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - nodejs
            - npm
            - gfortran-7
            - binutils
            - python-pip
      env:
        - GFORTRAN=gfortran-7
        - GCOV=gcov-7
        # build with build.sh, run unit tests
        - BUILD_SCRIPT="./build.sh --skip-documentation && ./build.sh --skip-documentation --enable-unicode"
        - CODE_COVERAGE="no"
        - DEPLOY_DOCUMENTATION="no"

    - os: linux
      dist: trusty
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - nodejs
            - npm
            - gfortran-8
            - binutils
            - python-pip
      env:
        - GFORTRAN=gfortran-8
        - GCOV=gcov-8
        # build with build.sh, run unit tests
        - BUILD_SCRIPT="./build.sh --skip-documentation && ./build.sh --skip-documentation --enable-unicode"
        - CODE_COVERAGE="no"
        - DEPLOY_DOCUMENTATION="no"

    - os: linux
      dist: trusty
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - nodejs
            - npm
            - gfortran-9
            - binutils
            - python-pip
      env:
        - GFORTRAN=gfortran-9
        - GCOV=gcov-9
        # build with build.sh, run unit tests
        - BUILD_SCRIPT="./build.sh --skip-documentation && ./build.sh --skip-documentation --enable-unicode"
        - CODE_COVERAGE="no"
        - DEPLOY_DOCUMENTATION="no"

install:
  - |
    if [[ ! -d "$HOME/.local/bin" ]]; then
      mkdir "$HOME/.local/bin"
    fi
  - export PATH="$HOME/.local/bin:$PATH"
  - export FC=/usr/bin/$GFORTRAN
  - ln -fs $FC "$HOME/.local/bin/gfortran" && gfortran --version
  - ls -l $FC
  - ln -fs /usr/bin/$GCOV "$HOME/.local/bin/gcov" && gcov --version
  - perl --version
  - pip install --upgrade pygooglechart
  - pip install --upgrade graphviz
  - (pip install --upgrade FoBiS.py==2.2.8 && FoBiS.py --version)
  - (pip install --upgrade ford==6.0.0 && ford --version)
  - export NPM_PACKAGES="${HOME}/.npm-packages"
  - mkdir "${HOME}/.npm-packages" || true
  - npm config set prefix "${HOME}/.npm-packages"
  - export PATH="${HOME}/.npm-packages/bin:$PATH"
  - npm install -g jsonlint
  - jsonlint --version || true # Why would you exit non-zero from --version ???!?!?! wth

before_script:
  - |
    if [ "$TRAVIS_TAG" ]; then
      if [[ "v$TRAVIS_TAG" != "v$(cat .VERSION)" ]]; then
        echo "ERROR: You are trying to tag a new release but have a version missmatch in \`.VERSION\`"
        false # throw an error
      fi
    fi

script:
  - echo $BUILD_SCRIPT
  - bash <<<$BUILD_SCRIPT

after_success:
  - cd $TRAVIS_BUILD_DIR
  - git config --global user.name "TRAVIS-CI-for-$(git --no-pager show -s --format='%cn' $TRAVIS_COMMIT)"
  - git config --global user.email "$(git --no-pager show -s --format='%ce' $TRAVIS_COMMIT)"
  - |
    if [[ $DEPLOY_DOCUMENTATION == [yY]* ]]; then
      ./deploy.sh #publish docs for master branch and tags
    fi
  - (yes | rm -r doc gh-pages) || true # wipe out doc dirs to avoid confusing codecov
  - |
    if [[ $CODE_COVERAGE == [yY]* ]]; then
      alias gcov=$GCOV
      rm json_*.F90-*unicode.gcov || true
      mv json_*.F90.gcov src/
      mv jf_test*.[fF]90.gcov src/tests/
      bash <(curl -s https://codecov.io/bash) -v -X $GCOV
    fi
